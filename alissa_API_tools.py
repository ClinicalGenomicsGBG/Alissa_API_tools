#This script contains functions and classes enabling the essential steps of the interaction with the Alissa API: obtaining an authentification token; creating a patient; loading a VCF file; and linking a patient and a VCF (creating a "lab result").
# The main() function will retrieve a token; check whether a patient exists (in Alissa) and if not, create it; check whether a data file exists (in Alissa) and if not, create it; and link patient and VCF.
# Usage (to print the help message): module load anaconda2/4.1.0; source activate wopr_alissa; python cgg.python --help

#TODO add an exception if token is not generated by function .fetch_token(); remove the exception from the main() function.


import chunk_vcf
import click
import os

from tools.classes import OAuth2Client
from tools.helpers import create_patient, create_datafile, create_lab_result, \
    setup_logger, get_alissa_credentials

#TODO think about the order of the arguments! E.g. put first all the arguments that have no default.
@click.command()
@click.option('-a', '--accession', required=True,
             help='Patient accession number')
@click.option('-s', '--sex', default='UNKNOWN', type=click.Choice(['FEMALE', 'MALE', 'UNKNOWN']),
             help='Sex of the sample')
@click.option('-f', '--alissa_folder', default='Default',
             type=click.Choice(['BCF demo', 'CRC pipeline validation', 'CRE2 Reference set files', 'Default', 'ExomeValidation', 'Klinisk Genetik', 'Klinisk Genetik - Forskning', 'Klinisk kemi', 'Validation WGS']),
             help='Patient folder in Alissa, for example "Klinisk kemi" or "Klinisk Genetik"')
@click.option('-v', '--vcf_path', required=True, type=click.Path(exists=True),
              help='Path to input VCF file')
@click.option('-o', '--output_folder', default='/tmp',
              help='Path to a folder where the VCF will be written if the input VCF is larger than the size argument. In that case, files will be loaded to Alissa from that folder')
@click.option('-s', '--size', required=True, type=int,
              help='Size in bp. If the VCF exceed this size, it will be split into 2, 3 or 4 VCFs')
@click.option('-n', '--name_in_vcf', required=True,
             help='Sample ID in the VCF header row')
@click.option('-i', '--production-instance', type=click.Choice(['production', 'test']) , default="test",
             help='What Alissa instance should be used. Production or Test.') #TODO invert the logic once testing is finished.
def main(accession, sex, alissa_folder, vcf_path, output_folder, size, name_in_vcf, production_instance):
    ## Set up the logfile and start logging
    logger = setup_logger('alissa_upload')

    ## Get the credentials set up
    logger.info(f"Starting upload of {os.path.basename(vcf_path)} to Alissa {production_instance} instance.")
    token_url, bench_url, username, password = get_alissa_credentials(production_instance)

    try:
        oauth2_client = OAuth2Client(username, password, token_url)
        token = oauth2_client.fetch_token()
    except:
        logger.error(f"Was not able to generate a api token.")
        raise PermissionError


    patient_id, patient_exists = create_patient(token, bench_url, accession, sex, alissa_folder)
    if patient_exists == True:
        logger.info(f"A patient already exists with patient ID: {patient_id}")
    else:
        logger.info(f"A patient has been created with patient ID: {patient_id}")

    vcfs = chunk_vcf.prepare_and_split_vcf(vcf_path, output_folder, size)
    for path in vcfs:
        datafile_id = create_datafile(token, bench_url, path)
        create_lab_result(token, bench_url,  patient_id, datafile_id, name_in_vcf)

   
if __name__ == '__main__':
    main()
